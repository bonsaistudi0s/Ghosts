plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }

    modImplementation "software.bernie.geckolib:geckolib-fabric-${minecraft_version}:${geckolib_version}"

    shadow("com.electronwill.night-config:toml:3.6.6")

    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
}

configurations {
    shadow
    implementation.extendsFrom shadow
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import net.fabricmc.loom.task.RemapJarTask

def shadowJarTask = tasks.named('shadowJar', ShadowJar)

shadowJarTask.configure {
    archiveClassifier.set('dev-shadow')
    configurations = [project.configurations.shadow]

    relocate 'com.electronwill.nightconfig', "dev.xylonity.nightconfig"

    exclude 'META-INF/LICENSE*', 'META-INF/NOTICE*'
}

tasks.named('remapJar', RemapJarTask).configure { remap ->
    dependsOn shadowJarTask

    inputFile.set(shadowJarTask.flatMap { it.archiveFile })

    archiveClassifier.set('')
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}