plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = version
group = 'com.wanmine'
archivesBaseName = 'ghosts'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: '2022.11.06-1.19.2'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'ghosts'

            mods {
                ghosts {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'ghosts'

            mods {
                ghosts {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'ghosts'

            mods {
                ghosts {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'ghosts', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                ghosts {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }

    flatDir {
        dirs 'libs'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.0'

    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.19:3.1.40')

    //runtimeOnly fg.deobf(fileTree(include: ['*.jar'], dir: 'libs'))
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Ghosts",
                "Specification-Vendor"    : "WanMine",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "WanMine",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property("version", version)

    filesMatching('META-INF/mods.toml') {
        expand(
                version: version,
        )
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
